setwd("~/Documents/GitHub/scarab-chromes/scripts")
library(chromePlus)
library(diversitree)
library(phytools)
# subtrees
trees <- read.tree('../data/final_100trees')
chrom <- read.csv('../data/final_chrom.csv')
sca.tip <- c()
luc.tip <- c()
pas.tip <- c()
for (i in 1:length(chrom$Family)){
if (chrom$Family[i] == 'Scarabaeidae'){
sca.tip <- c(sca.tip,chrom$Species[i])
}
if (chrom$Family[i] == 'Lucanidae'){
luc.tip <- c(luc.tip,chrom$Species[i])
}
if (chrom$Family[i] == 'Passalidae'){
pas.tip <- c(pas.tip,chrom$Species[i])
}
}
sca.tree <- keep.tip.multiPhylo(trees, sca.tip)
luc.tree <- keep.tip.multiPhylo(trees, luc.tip)
pas.tree <- keep.tip.multiPhylo(trees, pas.tip)
sca.chrom <- chrom[chrom$Species %in% sca.tip,]
luc.chrom <- chrom[chrom$Species %in% luc.tip,]
pas.chrom <- chrom[chrom$Species %in% pas.tip,]
# subtree analyses
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# read in data
sub <- c('sca','luc','pas')
for (i in 1:3){
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
chrom <- eval(parse(text = paste(sub[i],'chrom',sep = '.')))
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
for(k in 1:100){
print(k)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(k == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[k]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
# convert rate to millions of years
tree.depth <-c()
for(l in 1:100){
tree.depth[l] <- max(branching.times(trees[[l]]))
}
for (m in 1:length(results)){
results[[m]][,2:3] <- results[[m]][,2:3] / (tree.depth[m]*100)
}
#save data
write.csv(do.call(rbind,results), file = paste(paste('../results/simple',sub[i], sep = '_'),'csv', sep = '.'), row.names = F)
}
## checking convergence
all_luc <- read.csv('../results/simple_luc.csv')
all_pass <- read.csv('../results/simple_pas.csv')
all_sca <- read.csv('../results/simple_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -60), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-210,-165), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
## post burnin
sub_luc <- all_luc[all_luc$i %in% seq(51,100),]
sub_pas <- all_pass[all_pass$i %in% seq(51,100),]
sub_sca <- all_sca[all_sca$i %in% seq(51,100),]
# asc
# scarab
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
library(viridis)
library(coda)
## checking convergence
all_luc <- read.csv('../results/simple_luc.csv')
all_pass <- read.csv('../results/simple_pas.csv')
all_sca <- read.csv('../results/simple_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -60), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-210,-165), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
## post burnin
sub_luc <- all_luc[all_luc$i %in% seq(51,100),]
sub_pas <- all_pass[all_pass$i %in% seq(51,100),]
sub_sca <- all_sca[all_sca$i %in% seq(51,100),]
# asc
# scarab
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density((sub_sca$asc1)),main ='',xlab='Fission (/MY)',
ylim =c(-0.3,700), xlim=c(0,0.07))
polygon(density(sub_sca$asc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$asc))
y <- -.1
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[1])
# lucanidae
lines(density(sub_luc$asc1))
polygon(density(sub_luc$asc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$asc))
y <- -.2
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[2])
# passalidae
lines(density((sub_pas$asc1)))
polygon(density(sub_pas$asc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pas$asc))
y<- -.3
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[3])
points(x=6.8,y=8, col = cols[1], pch= 16,cex=1)
text(x=6.8,y=8,pos= 4, "Scarabaeidae", cex=1)
points(x=6.8,y=7.6, col = cols[2], pch= 16,cex =1)
text(x=6.8,y=7.6,pos= 4, "Lucanidae", cex=1)
points(x=6.8,y=7.2, col = cols[3], pch= 16,cex=1)
text(x=6.8,y=7.2,pos= 4, "Passalidae", cex=1)
#desc
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density(sub_sca$desc1),main ='',xlab='Fusion (/MY)',
xlim= c(0,0.1), ylim =c(-0.02,350))
polygon(density(sub_sca$desc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$desc))
lines(y=c(-0.03,-0.03), x=hpd[1:2], lwd=2,col=cols[1])
lines(density((sub_luc$desc1)))
polygon(density(sub_luc$desc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$desc))
lines(y=c(-0.07,-0.07), x=hpd[1:2], lwd=2,col=cols[2])
lines(density((sub_pas$desc1)))
polygon(density(sub_pas$desc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pas$desc))
lines(y=c(-0.11,-0.11), x=hpd[1:2], lwd=2,col=cols[3])
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
points(x=8,y=4, col = cols[1], pch= 16)
text(x=8,y=4,pos= 4, "Scarabaeidae")
points(x=8,y=3.8, col = cols[2], pch= 16)
text(x=8,y=3.8,pos= 4, "Lucanidae")
points(x=8,y=3.6, col = cols[3], pch= 16)
text(x=8,y=3.6,pos= 4, "Passalidae")
setwd("~/Documents/GitHub/scarab-chromes/figure")
###chrom number###
#make simmap (only chrom number)
tree <- read.tree('../data/final_100trees')[[37]]
chrom <- read.csv('../data/final_chrom.csv')
###chrom number###
#make simmap (only chrom number)
tree <- read.tree('../data/final_100trees')[[37]]
chrom <- read.csv('../data/final_chrom.csv')
#transform trees to mya from hundred of mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
Q <- matrix(data = 0, c,c)
# make row and column name vectors
cname<-c(rng[1]:rng[2])
colnames(Q)<-row.names(Q)<-cname
for (i in 1:c){
for (j in 1:c){
# define transition
# number change
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(1,2,4)],
range = rng,
hyper = F)
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
results <- readRDS('../results/simple_model_scs.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
Q[Q == 1] <- mean(b_result$asc1)
results <- readRDS('../results/simple_model_scs.rds')
results
first_tree <- results[[37]]
first_tree
b_result <- first_tree[51:100,]
model <- Q
dat <- readRDS('../../../../Downloads/results/simple_model_number.rds')
dat
dat <- readRDS('../../../../Downloads/results/simple_model_number.rds')
View(dat)
dat <- readRDS('../../../../Downloads/results/simple_model_scs.rds')
# checking divergence
results <- readRDS('../results/simple_model_scs.rds')
plot(results[[1]]$p, type = 'l', ylim = c(-110, -70))
for (i in 2:100){
lines(results[[i]]$p)
}
chrom <- read.csv('../data/chrom.data/finalchrom.csv')
chrom <- read.csv('../data/final_chrom.csv')
trees <- read.tree("../data/final_100trees")
#transform trees to mya from hundred of mya
for(i in 1:length(trees)){
trees[[i]]$edge.length <- trees[[i]]$edge.length * 100
}
scs <- c()
for(i in 1:length(chrom$SCS)){
hit <- which(chrom$Species == trees[[37]]$tip.label[i])
scs[i] <- chrom$SCS[hit]
}
names(scs) <- trees[[37]]$tip.label
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
Q<- matrix(c(0,3,5,1,0,6,2,4,0), 3)
colnames(Q) <- rownames(Q) <- c('NeoXY','XO','XY')
model <- Q
Q[1,2] <- mean(b_result$q23)
Q[1,3] <- mean(b_result$q21)
Q[2,1] <- mean(b_result$q32)
Q[2,3] <- mean(b_result$q31)
Q[3,1] <- mean(b_result$q12)
Q[3,2] <- mean(b_result$q13)
diag(Q) <- -rowSums(Q)
# make.simmap2 with the rate estimates from mcmc
test <- make.simmap2(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=1,model=model,monitor=T,rejmax=100000000)
source('functions.R')
source('functions.R')
# make.simmap2 with the rate estimates from mcmc
test <- make.simmap2(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=1,model=model,monitor=T,rejmax=100000000)
# makeing simmap with the rate estimates from mcmc
test <- make.simmap(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=100,model=model)
# the issue might have be the low rate and transition between short branch length
# so I did plot the tree and sex chromosome systems and drop some suspecious tips
plotSimmap(test,fsize = 0.003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
cols <- setNames(viridis(3), c('NeoXY','XY','XO'))
plotSimmap(test, fsize =0.0003, type = 'fan', colors =cols)
chrom <- read.csv('../data/final_chrom.csv')
# subtrees
trees <- read.tree('../data/final_100trees')
chrom <- read.csv('../data/final_chrom.csv')
sca.tip <- c()
luc.tip <- c()
pas.tip <- c()
for (i in 1:length(chrom$Family)){
if (chrom$Family[i] == 'Scarabaeidae'){
sca.tip <- c(sca.tip,chrom$Species[i])
}
if (chrom$Family[i] == 'Lucanidae'){
luc.tip <- c(luc.tip,chrom$Species[i])
}
if (chrom$Family[i] == 'Passalidae'){
pas.tip <- c(pas.tip,chrom$Species[i])
}
}
sca.tree <- keep.tip.multiPhylo(trees, sca.tip)
luc.tree <- keep.tip.multiPhylo(trees, luc.tip)
pas.tree <- keep.tip.multiPhylo(trees, pas.tip)
sca.chrom <- chrom[chrom$Species %in% sca.tip,]
luc.chrom <- chrom[chrom$Species %in% luc.tip,]
pas.chrom <- chrom[chrom$Species %in% pas.tip,]
# variables to hold results and depths
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
chrom <- sca.chrom
trees <- sca.tree
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
# subtree analyses
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
for(i in 1:100){
print(i)
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[i]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
