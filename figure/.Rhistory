map.axes(cex.axis=0.8)
map.scale(x=-75, y=27, ratio=FALSE, relwidth=0.1, cex = 0.8)
# whole usa map
# pdf("../plots/Odontotaenius_US.pdf", width = 6, height = 6)
par(mar = c(0, 0, 0, 0))
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-75, y=27, ratio=FALSE, relwidth=0.1, cex = 0.5)
cols <- c('#67a9cf', '#ef8a62')
# whole usa map
# pdf("../plots/Odontotaenius_US.pdf", width = 6, height = 6)
par(mar = c(0, 0, 0, 0))
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-75, y=27, ratio=FALSE, relwidth=0.15, cex = 0.5)
map.scale(x=-75, y=27, ratio=FALSE, relwidth=0.12, cex = 0.5)
# whole usa map
# pdf("../plots/Odontotaenius_US.pdf", width = 6, height = 6)
par(mar = c(0, 0, 0, 0))
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-75, y=27, ratio=FALSE, relwidth=0.12, cex = 0.5)
map.scale(x=-72, y=27, ratio=FALSE, relwidth=0.12, cex = 0.5)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.12, cex = 0.5)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.12, cex = 0.5)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.5)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.5)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.3, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.3, col = cols[2])
x=-78
points(x= x, y = 30, pch = 16, cex = 0.7,col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = 0.7 )
points(x= x, y = 29, pch = 16, cex = 0.7,col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = 0.7 )
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-78
points(x= x, y = 30, pch = 16, cex = 0.7,col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = 0.7 )
points(x= x, y = 29, pch = 16, cex = 0.7,col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = 0.7 )
cex = 0.9
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-78
cex = 0.9
points(x= x, y = 30, pch = 16, cex = cex,col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = 0.7 )
points(x= x, y = 29, pch = 16, cex = cex,col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = 0.7 )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-78
dot = 0.9
font = 0.9
points(x= x, y = 30, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 29, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-80
dot = 0.9
font = 0.9
points(x= x, y = 30, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 29, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-79
dot = 0.9
font = 0.9
points(x= x, y = 30, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 29, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-79
dot = 0.9
font = 0.8
points(x= x, y = 30, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 29, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 29, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-80
dot = 0.9
font = 0.8
points(x= x, y = 31, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 31, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 30, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 30, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-80
dot = 0.9
font = 0.8
points(x= x, y = 32, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 32, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 31, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 31, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
map('world', fill = T, col ='#f0f0f0', xlim = c(-110.5, -65), ylim = c(24.3, 50), xlab = "lon", ylab = "lat")
map('state', add=T)
map.axes(cex.axis=0.8)
map.scale(x=-73, y=27, ratio=FALSE, relwidth=0.11, cex = 0.4)
cols <- c('#67a9cf', '#ef8a62')
points(x=disjunctus$lon, y = disjunctus$lat, pch = 16, cex = 0.5, col = cols[1])
points(x=floridanus$lon, y = floridanus$lat, pch = 16, cex = 0.5, col = cols[2])
x=-80
dot = 0.9
font = 0.8
points(x= x, y = 31.5, pch = 16, cex = dot, col = cols[1])
text(x= x, y = 31.5, label = substitute(paste(italic('Odontotaenius disjunctus')))  ,pos = 4, cex = font )
points(x= x, y = 30.5, pch = 16, cex = dot, col = cols[2])
text(x= x, y = 30.5, label = substitute(paste(italic('Odontotaenius floridanus'))),pos = 4, cex = font )
setwd("~/Downloads")
dat <- read.table('Output_Ne_46GONE')
dat <- read.table('Output_Ne_46GONE')
View(dat)
dat <- read.table('Output_Ne_46GONE', row.names = T)
dat <- read.table('Output_Ne_46GONE', row.names = F)
dat <- read.table('Output_Ne_46GONE', row.names = -1)
help("read.table")
dat <- read.table('Output_Ne_46GONE', skip = 1)
dat
row.names(dat) <- c('Generation', 'Geometric_mean')
row.names(dat)
colnames(dat) <- c('Generation', 'Geometric_mean')
dat
plot(dat$Generation, dat$Geometric_mean)
View(dat)
# convert generation to years ago
dat$Generation
dat <- read.table('Output_Ne_46GONE', skip = 1)
dat <- read.table('Output_Ne_46GONE', skip = 1)
# convert generation to years ago
dat$V1 <- dat$V1*2
colnames(dat) <- c('Years ago', 'Geometric_mean')
plot(dat$Generation, dat$Geometric_mean)
plot(dat$`Years ago`, dat$Geometric_mean)
plot(dat$Years ago, dat$Geometric_mean)
dat
dat <- read.table('Output_Ne_46GONE', skip = 1)
# convert generation to years ago
dat$V1 <- dat$V1*2
colnames(dat) <- c('Years_ago', 'Geometric_mean')
plot(dat$`Years ago`, dat$Geometric_mean)
plot(dat$Years_ago, dat$Geometric_mean)
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500))
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500), type - 'l')
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500), type = 'l')
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500), type = 'l',
xlab = 'Years ago', ylab = 'Ne')
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500), type = 'l',
xlab = 'Years ago', ylab = expression(italic(Ne)))
dat <- read.table('Output_Ne_46GONE', skip = 1)
# convert generation to years ago
dat$V1 <- dat$V1*2
dat
dat <- read.table('Output_Ne_46GONE', skip = 1)
View(dat)
dat <- read.table('Output_Ne_46GONE', skip = 2)
# convert generation to years ago
dat$V1 <- dat$V1*2
colnames(dat) <- c('Years_ago', 'Geometric_mean')
plot(dat$Years_ago, dat$Geometric_mean,
xlim = c(0,500), type = 'l',
xlab = 'Years ago', ylab = expression(italic(Ne)))
setwd("~/Desktop/Projects/Long_armed_beetle/scripts")
# Plot in R
# jellyfish
library(viridis)
dataframe21 <- read.table("../data/21mer_out.histo")
plot(dataframe21[1:150,],
ylim = c(0,17000000),
pch = 16, col = viridis(3)[2],
xlab = 'K-mer depth', ylab = 'Frequency')
abline(v = 58, col = 'red')
text(100,17000000, label = 'Genome estimate:', pos = 4)
text(100,16000000, label = '459,353,101 bp', pos =4)
# single copy data point is from 40 to 85
# the total k-mers in the distribution
n.point <- length(dataframe21$V1)
sum(as.numeric(dataframe21[45:n.point,1]*dataframe21[45:n.point,2]))
# # determine peak position and genome size
dataframe21[45:95,]
peak <- which(dataframe21$V2 == max(dataframe21[45:95,]))
sum(as.numeric(dataframe21[45:n.point,1]*dataframe21[45:n.point,2]))/peak
plot(dataframe21[15:150,], type ='l',
xlab = 'k-mer depth', ylab = 'Frequency',
xlim = c(15,105))
points(dataframe21[15:150,])
n.point <- length(dataframe21$V1)
sum(as.numeric(dataframe21[15:n.point,1]*dataframe21[15:n.point,2]))
abline(v = 58, col = 'red')
dataframe21[45:95,]
peak <- which(dataframe21$V2 == max(dataframe21[45:95,]))
setwd("~/Desktop/Projects/Long_armed_beetle/scripts")
long.arm <- read.fasta('../data/yahs.out_scaffolds_final.fa.masked')
# Genome contig cov
library(seqinr)
long.arm <- read.fasta('../data/yahs.out_scaffolds_final.fa.masked')
tab <- matrix(data = NA,
nrow = length(long.arm),
ncol = 3)
# fill in table
for(i in 1:nrow(tab)){
tab[i,1] <- i
tab[i,2] <- length(long.arm[[i]])
}
rm(long.arm)
# sort table by contig length
tab <- tab[tab[order(tab[,2],decreasing = T)],]
# fill the cumulative sum
tab[,3] <- (tab[,2] / sum(tab[,2]))*100
tab <- cbind(tab,(tab[,3] / sum(tab[,2])) * 100)
# get percent genome represented by each segment
segs <- matrix(data = NA, nrow = nrow(tab), ncol = 1)
segs[1,1] <- 0
for(i in 1:nrow(segs)){
segs[i,1] <- cumsum(tab[,3])[i]
}
x = c(0, segs[,1])
y = tab[,2]/1000000
y = c(y[1], y)
# add the value to make the line go to 0
par(mgp = c(1.9, 0.5, 0))
plot(x, y, type = "n", pch = 19,
xlim = c(0,100),
xlab = "Genome Coverage (%)", ylab = "Scaffold Size (Mb)",cex.lab=1.2)
# title(substitute(italic(x) ~ "Genome Assembly", list(x = "Cheirotonus formosanus")),
# adj = 0.5, line = 1.5, cex = 1.2)
# Loop through points and draw horizontal and vertical lines
for (i in 1:(length(x)-1)) {
# Horizontal line between current point and the next point
segments(x[i], y[i], x[i+1], y[i])
# Vertical line between next point's y level and previous point's x level
segments(x[i+1], y[i], x[i+1], y[i+1])
}
text(x = 16, y = 90, labels = "93.2 MB")
x1 =-5
text(x=x1,y=70, labels = "Genome Size: 601.3 MB", pos = 4)
text(x=x1,y=65, labels = "Scaffolds: 62", pos = 4)
text(x=x1,y=60, pos = 4, labels = expression('N'[50]:'83.3 MB'))
text(x=x1,y=20, labels = substitute(paste(bold("BUSCO"))(endopterygota_odb10)), pos = 4, cex = 0.9)
text(x=x1,y=15, labels = "Complete & Single-Copy: 98.4%", pos = 4, cex = 0.9)
text(x=x1,y=10, labels = "Complete & Duplicated: 0.9%", pos = 4, cex = 0.9)
text(x=x1,y=5, labels = "Fragmented: 0.4%", pos = 4, cex = 0.9)
text(x=x1,y=0, labels = "Missing: 0.2%", pos = 4, cex = 0.9)
abline(v = 50, col = "red", lty = 2)
abline(v = 29.37448, col = "red", lty = 2)
setwd("~/Documents/GitHub/scarab-chromes/figure")
results <- readRDS('../results/simple_model_scs.rds')
# chrom data
allchrom <- read.csv('../data/SpeciesChromList.csv')
# subset chrom
tip.names <- tree$tip.label
# checking divergence
results <- readRDS('../results/simple_model_scs.rds')
plot(results[[1]]$p, type = 'l', ylim = c(-130, -70))
for (i in 2:100){
lines(results[[i]]$p)
}
# making simmap
tree <- read.tree('../data/final100trees')[[37]]
results <- readRDS('../results/simple_model_scs.rds')
# chrom data
allchrom <- read.csv('../data/SpeciesChromList.csv')
# subset chrom
tip.names <- tree$tip.label
chrom <- data.frame()
for (j in 1:length(tip.names)){
if (tip.names[j] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[j]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[j])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[j])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[j])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[j] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[j]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[j])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[j])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[j])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
#transform trees to mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
scs <- c()
for(i in 1:length(chrom$SCS)){
hit <- which(chrom$Species == tree$tip.label[i])
scs[i] <- chrom$SCS[hit]
}
# randomly pick one tree
tree <- read.tree('../data/final100trees')[[37]]
# simmap
source('../scripts/functions.R')
library(fields)
library(viridis)
library(ape)
library(chromePlus)
# randomly pick one tree
tree <- read.tree('../data/final100trees')[[37]]
# chrom data
allchrom <- read.csv('../data/SpeciesChromList.csv')
# subset chrom
tip.names <- tree$tip.label
chrom <- data.frame()
for (j in 1:length(tip.names)){
if (tip.names[j] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[j]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[j])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[j])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[j])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[j] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[j]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[j])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[j])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[j])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
#transform trees to mya from hundred of mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
Q <- matrix(data = 0, c,c)
# make row and column name vectors
cname<-c(rng[1]:rng[2])
colnames(Q)<-row.names(Q)<-cname
for (i in 1:c){
for (j in 1:c){
# define transition
# number change
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
results <- readRDS('../results/chrom_number_model_result.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
Q[Q == 1] <- mean(b_result$asc1)
Q[Q == 2] <- mean(b_result$desc1)
diag(Q) <- -(rowSums(Q))
colnames(Q) <- rownames(Q) <- 1:19
colnames(model) <- rownames(model) <- 1:19
colnames(chrom.mat_) <- 1:19
test <- make.simmap2(tree = tree, x = chrom.mat_, model = model,Q = Q,nsim = 1,pi = "fitzjohn",rejmax = 1000000,rejint = 100000, monitor = T)
cols<-setNames(rev(viridis(n=19, option = 'H',begin = 0 )),
c(1:19))
dat.for.fix <- chrom.s[,c(2,3)]
dat.for.fix$Chroms <- dat.for.fix$Chroms -2
test.fixed <-fix.simmap(test,dat.for.fix,model)
test <- test.fixed[[1]]
#plot
plotSimmap(test, cols,fsize = .003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
cols<-setNames(rev(viridis(n=19, option = 'H',begin = 0 )),
c(1:19))
dat.for.fix <- chrom.s[,c(2,3)]
dat.for.fix$Chroms <- dat.for.fix$Chroms -2
test.fixed <-fix.simmap(test,dat.for.fix,model)
test <- test.fixed[[1]]
#plot
plotSimmap(test, cols,fsize = .003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
arc.cladelabels(node=439,text="Passalidae",offset=5,mark.node=FALSE)
arc.cladelabels(node=439,text="Passalidae",offset=5,mark.node=FALSE)
library(fields)
library(viridis)
library(ape)
library(chromePlus)
# make.simmap2 with the rate estimates from mcmc
test <- make.simmap2(tree=tree, x=scs ,Q=Q, pi="fitzjohn",nsim=1,model=model,monitor=T,rejmax=100000000)
cols <- setNames(viridis(3), c('NeoXY','XY','XO'))
plotSimmap(test, fsize =0.0003, type = 'fan', colors =cols)
arc.cladelabels(node=439,text="Passalidae",offset=5,mark.node=FALSE)
