sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::raster(output_tiles[["elevation"]][[1]])
raste_ob <- raster::raster(output_tiles[["elevation"]][[1]])
raster_ob <- raster::raster(output_tiles[["elevation"]][[1]])
plot(raster_ob)
point(x= -110.5, y = 31.6)
points(x= -110.5, y = 31.6)
plot(raster_ob, xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob,xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob, xlim = c(-112,-109))
plot(raster_ob)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
plot(raster_ob)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
plot(raster_ob)
az <- data.frame(110.825304,33.371061)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(sky_islands, 1000000)
az <- set_bbox_side_length(az, 1000000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 1000000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 400000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 400000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 300000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 300000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 200000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# genetic drift effec on population size
n = 10
gen = 1000
a1 = 0.5
a2 = 1-a1
n*2
n*2
toallel <- n*2
a1 * toallel
a2 * toallel
# propotion of SA-fusion
library(devtools)
install_github('coleoguy/evobir', build_vignettes=T)
remove.packages("evobiR", lib="~/Library/R/arm64/4.5/library")
install_github('coleoguy/evobir', build_vignettes=T)
install_github('coleoguy/evobir', build_vignettes=T)
setwd("~/Documents/GitHub/scarab-chromes/figure")
# sub-tree
all_luc <- read.csv('../results/sub_luc.csv')
all_pass <- read.csv('../results/sub_pas.csv')
all_sca <- read.csv('../results/sub_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -50), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-270,-150), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
###############
# subset data #
###############
# post burnin
sub_luc <- all_luc[all_luc$i == c(51:100),]
sub_pass <- all_pass[all_pass$i == c(51:100),]
sub_sca <- all_sca[all_sca$i == c(51:100),]
### desc ###
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
library(viridis)
library(coda)
# sub-tree
all_luc <- read.csv('../results/sub_luc.csv')
all_pass <- read.csv('../results/sub_pas.csv')
all_sca <- read.csv('../results/sub_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -50), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-270,-150), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
###############
# subset data #
###############
# post burnin
sub_luc <- all_luc[all_luc$i == c(51:100),]
sub_pass <- all_pass[all_pass$i == c(51:100),]
sub_sca <- all_sca[all_sca$i == c(51:100),]
### desc ###
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
hpdcols <- viridis(3, option = 'D', begin = 0.45)
plot(density(sub_sca$desc1),main ='',xlab='Fusion (MY)',
xlim= c(0,0.09), ylim =c(-10,260))
title(main = "(A)", adj = 0, line = 0.5)
polygon(density(sub_sca$desc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$desc))
y <- -5
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[1])
lines(density((sub_luc$desc1)))
polygon(density(sub_luc$desc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$desc))
y <- -10
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[2])
lines(density((sub_pass$desc1)))
polygon(density(sub_pass$desc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$desc))
y <-  -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[3])
x = 0.07
cex = 1.2
points(x=x,y=260, col = hpdcols[1], pch= 16, cex = cex )
text(x=x,y=260,pos= 4, "Scarabaeidae")
points(x=x,y=245, col = hpdcols[2], pch= 16, cex = cex)
text(x=x,y=245,pos= 4, "Lucanidae")
points(x=x,y=230, col = hpdcols[3], pch= 16, cex = cex)
text(x=x,y=230,pos= 4, "Passalidae")
# save as PDF 6x6
### asc (fission) ###
# scarab
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
hpdcols <- viridis(3, option = 'D', begin = 0.45)
plot(density((sub_sca$asc1)),main ='',xlab='Fission (MY)',
ylim =c(-10,260), xlim=c(0,0.09))
title(main = "(B)", adj = 0, line = 0.5)
polygon(density(sub_sca$asc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$asc))
y <- -5
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[1])
# lucanidae
lines(density(sub_luc$asc1))
polygon(density(sub_luc$asc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$asc))
y <- -10
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[2])
# passalidae
lines(density((sub_pass$asc1)))
polygon(density(sub_pass$asc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$asc))
y<- -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=hpdcols[3])
x = 0.07
cex = 1.2
points(x=x,y=260, col = hpdcols[1], pch= 16,cex = cex )
text(x=x,y=260,pos= 4, "Scarabaeidae", cex=1)
points(x=x,y=245, col = hpdcols[2], pch= 16,cex = cex )
text(x=x,y=245,pos= 4, "Lucanidae", cex=1)
points(x=x,y=230, col = hpdcols[3], pch= 16,cex = cex )
text(x=x,y=230,pos= 4, "Passalidae", cex=1)
# save PDF 6x6
library(ape)
library(phytools)
library(viridis)
trees <- read.tree('../data/final100trees')
chrom <- read.csv('../data/SpeciesChromList.csv')
# random pick one tree
set.seed(4)
tree <- trees[[sample(100,1)]]
# trimming genus level
genus <- c()
for (i in 1:length(tree$tip.label)){
# full name
if (tree$tip.label[i] %in% chrom$Name){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Name)][1])
}
# genus name
if (tree$tip.label[i] %in% chrom$Genus){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Genus)][1])
}
}
genus <- unique(genus)
# random pick tips
tips <- c()
for (i in 1:length((genus))){
# randome sample from all hit
tips <- c(tips, tree$tip.label[grepl(genus[i], tree$tip.label)][sample(sum(grepl(genus[i], tree$tip.label)),1)])
}
# trim tree
trim.genus.tree <- keep.tip(tree, tip = tips)
# change tip label only genus level
for (i in 1:length(trim.genus.tree$tip.label)){
trim.genus.tree$tip.label[i] <- sub("_.*", "", trim.genus.tree$tip.label[i])
}
fam <- c()
for (i in 1:length(trim.genus.tree$tip.label)){
if (trim.genus.tree$tip.label[i] %in% chrom$Genus){
fam <- c(fam, chrom$Family[which(trim.genus.tree$tip.label[i] == chrom$Genus)][1])
}
}
# reorder tip
tip_order <- trim.genus.tree$tip.label[order(fam)]
tree_ordered <- rotateConstr(trim.genus.tree, tip_order)
# creating data table
table <- matrix(data = 0, nrow = length(tips), ncol = (range(chrom$male.haploid)[2]-range(chrom$male.haploid)[1]+1))
table <- data.frame(table)
row.names(table) <- genus
colnames(table) <- range(chrom$male.haploid)[1]:range(chrom$male.haploid)[2]
for (i in 1:length(genus)){
for (j in 1:length(chrom$male.haploid[which(chrom$Genus == genus[i])])){
num <- 0
num <- chrom$male.haploid[which(chrom$Genus == genus[i])][j]
table[i,num - range(chrom$male.haploid)[1] +1] <- table[i,num - range(chrom$male.haploid)[1] +1] +1
}
}
# remove the last two row because of missing data
table <- table[,-c(19,18)]
cols <- viridis(40, direction = -1, option = "F")
cols[1] <- 'white'
phylo.heatmap(tree_ordered, table, fsiz = c(0.0022,0.5,0.5),
split=c(0.7,0.3),
legend = T,labels = T,
legend.pos = c(0.02, 0.01),
pts = F, lwd = 0.5,
colors = cols)
famcols <- viridis(3, option = 'D', begin = 0.45)
fam <- c(rep("Lucanidae",8),rep("Passalidae",12),rep("Scarabaeidae",93))
fam <- gsub("Scarabaeidae", famcols[1], fam)
fam <- gsub("Passalidae", famcols[2], fam)
fam <- gsub("Lucanidae", famcols[3],fam)
# Add colored tip labels manually
tiplabels(pch = 19, col = fam, cex = 0.5, adj = 0.5)
x = -0.3
y = -0.015
s = 0.035
points(x,y, pch = 19, col = famcols[1])
text(x,y, label = "Scarabaeidae", pos =4)
points(x,y-s,pch = 19, col = famcols[2])
text(x,y-s, label = "Passalidae", pos =4)
points(x,y-2*s,pch = 19, col = famcols[3])
text(x,y-2*s, label = "Lucanidae", pos =4)
# draw grid line
lwd = 0.05
grid.col <- 'gray87'
y0=-0.0045
y1=1.0045
x0 = 1.1424
x1 = 0.501
# find the limit first
# segments(x0 = x1, y0 = y0, x1 = x1, y1 = y1, lwd = lwd, col = grid.col)
# segments(x0 = x0, y0 = y0, x1 = x0, y1 = y1, lwd = lwd, col = grid.col)
# segments(x0 = 0.5, y0 = y0, x1 = 1.143, y1 = y0, lwd = lwd, col = grid.col)
# segments(x0 = 0.5, y0 = y1, x1 = 1.143, y1 = y1, lwd = lwd, col = grid.col)
for (i in 1:(length(trim.genus.tree_ordered$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(trim.genus.tree_ordered$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
# genus tree
library(ape)
library(phytools)
library(viridis)
trees <- read.tree('../data/final100trees')
chrom <- read.csv('../data/SpeciesChromList.csv')
# random pick one tree
set.seed(4)
tree <- trees[[sample(100,1)]]
# trimming genus level
genus <- c()
for (i in 1:length(tree$tip.label)){
# full name
if (tree$tip.label[i] %in% chrom$Name){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Name)][1])
}
# genus name
if (tree$tip.label[i] %in% chrom$Genus){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Genus)][1])
}
}
genus <- unique(genus)
# random pick tips
tips <- c()
for (i in 1:length((genus))){
# randome sample from all hit
tips <- c(tips, tree$tip.label[grepl(genus[i], tree$tip.label)][sample(sum(grepl(genus[i], tree$tip.label)),1)])
}
# trim tree
trim.genus.tree <- keep.tip(tree, tip = tips)
# change tip label only genus level
for (i in 1:length(trim.genus.tree$tip.label)){
trim.genus.tree$tip.label[i] <- sub("_.*", "", trim.genus.tree$tip.label[i])
}
fam <- c()
for (i in 1:length(trim.genus.tree$tip.label)){
if (trim.genus.tree$tip.label[i] %in% chrom$Genus){
fam <- c(fam, chrom$Family[which(trim.genus.tree$tip.label[i] == chrom$Genus)][1])
}
}
# reorder tip
tip_order <- trim.genus.tree$tip.label[order(fam)]
tree_ordered <- rotateConstr(trim.genus.tree, tip_order)
# creating data table
table <- matrix(data = 0, nrow = length(tips), ncol = (range(chrom$male.haploid)[2]-range(chrom$male.haploid)[1]+1))
table <- data.frame(table)
row.names(table) <- genus
colnames(table) <- range(chrom$male.haploid)[1]:range(chrom$male.haploid)[2]
for (i in 1:length(genus)){
for (j in 1:length(chrom$male.haploid[which(chrom$Genus == genus[i])])){
num <- 0
num <- chrom$male.haploid[which(chrom$Genus == genus[i])][j]
table[i,num - range(chrom$male.haploid)[1] +1] <- table[i,num - range(chrom$male.haploid)[1] +1] +1
}
}
# remove the last two row because of missing data
table <- table[,-c(19,18)]
cols <- viridis(40, direction = -1, option = "F")
cols[1] <- 'white'
phylo.heatmap(tree_ordered, table, fsiz = c(0.0022,0.5,0.5),
split=c(0.7,0.3),
legend = T,labels = T,
legend.pos = c(0.02, 0.01),
pts = F, lwd = 0.5,
colors = cols)
famcols <- viridis(3, option = 'D', begin = 0.45)
fam <- c(rep("Lucanidae",8),rep("Passalidae",12),rep("Scarabaeidae",93))
fam <- gsub("Scarabaeidae", famcols[1], fam)
fam <- gsub("Passalidae", famcols[2], fam)
fam <- gsub("Lucanidae", famcols[3],fam)
# Add colored tip labels manually
tiplabels(pch = 19, col = fam, cex = 0.5, adj = 0.5)
x = -0.3
y = -0.015
s = 0.035
points(x,y, pch = 19, col = famcols[1])
text(x,y, label = "Scarabaeidae", pos =4)
points(x,y-s,pch = 19, col = famcols[2])
text(x,y-s, label = "Passalidae", pos =4)
points(x,y-2*s,pch = 19, col = famcols[3])
text(x,y-2*s, label = "Lucanidae", pos =4)
# draw grid line
lwd = 0.05
grid.col <- 'gray87'
y0=-0.0045
y1=1.0045
x0 = 1.1424
x1 = 0.501
for (i in 1:(length(trim.genus.tree_ordered$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(trim.genus.tree_ordered$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
for (i in 1:(ncol(table)+1)){
z = seq(from = x0, to = x1, length.out = ncol(table)+1)[i]
segments(x0 = z, y0 = y0, x1 = z, y1 = y1, lwd = lwd,col = grid.col)
}
phylo.heatmap(tree_ordered, table, fsiz = c(0.0022,0.5,0.5),
split=c(0.7,0.3),
legend = T,labels = T,
legend.pos = c(0.02, 0.01),
pts = F, lwd = 0.5,
colors = cols)
famcols <- viridis(3, option = 'D', begin = 0.45)
fam <- c(rep("Lucanidae",8),rep("Passalidae",12),rep("Scarabaeidae",93))
fam <- gsub("Scarabaeidae", famcols[1], fam)
fam <- gsub("Passalidae", famcols[2], fam)
fam <- gsub("Lucanidae", famcols[3],fam)
# Add colored tip labels manually
tiplabels(pch = 19, col = fam, cex = 0.5, adj = 0.5)
x = -0.3
y = -0.015
s = 0.035
points(x,y, pch = 19, col = famcols[1])
text(x,y, label = "Scarabaeidae", pos =4)
points(x,y-s,pch = 19, col = famcols[2])
text(x,y-s, label = "Passalidae", pos =4)
points(x,y-2*s,pch = 19, col = famcols[3])
text(x,y-2*s, label = "Lucanidae", pos =4)
# draw grid line
lwd = 0.05
grid.col <- 'gray87'
y0=-0.0045
y1=1.0045
x0 = 1.1424
x1 = 0.501
for (i in 1:(length(trim.genus.tree_ordered$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(trim.genus.tree_ordered$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
for (i in 1:(length(trim.genus.tree_ordered$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(trim.genus.tree_ordered$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
for (i in 1:(ncol(table)+1)){
z = seq(from = x0, to = x1, length.out = ncol(table)+1)[i]
segments(x0 = z, y0 = y0, x1 = z, y1 = y1, lwd = lwd,col = grid.col)
}
for (i in 1:(length(tree_ordered$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(tree_ordered$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
for (i in 1:(ncol(table)+1)){
z = seq(from = x0, to = x1, length.out = ncol(table)+1)[i]
segments(x0 = z, y0 = y0, x1 = z, y1 = y1, lwd = lwd,col = grid.col)
}
