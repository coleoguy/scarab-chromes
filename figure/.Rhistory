crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
help("get_tiles")
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
)
location_of_interest
View(location_of_interest)
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
location_of_interest
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
location_of_interest
location_of_interest
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
library(terrainr)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
library(terrainr)
library(sf)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
# RasterLayer
r <- raster(nrows=10, ncols=10)
library(raster)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
View(r)
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::raster(output_tiles[["elevation"]][[1]])
raste_ob <- raster::raster(output_tiles[["elevation"]][[1]])
raster_ob <- raster::raster(output_tiles[["elevation"]][[1]])
plot(raster_ob)
point(x= -110.5, y = 31.6)
points(x= -110.5, y = 31.6)
plot(raster_ob, xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob,xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob, xlim = c(-112,-109))
plot(raster_ob)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
plot(raster_ob)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
plot(raster_ob)
az <- data.frame(110.825304,33.371061)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(sky_islands, 1000000)
az <- set_bbox_side_length(az, 1000000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 1000000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 400000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 400000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 300000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 300000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 200000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
setwd("~/Documents/GitHub/scarab-chromes/scripts")
# 4 in 69 combination
combn(6,69)
# 4 in 69 combination
combn(69,4)
# 4 in 69 combination
length(combn(69,4))
combn(10,2)
# 4 in 69 combination
length(combn(69,4))
# 4 in 69 combination
length(combn(69,4))*2
# 4 in 69 combination
length(combn(69,5))*2
# 4 in 69 combination
length(combn(69,5))*2 > 1000000
combn(10,2)[1]
combn(10,2)[[1]]
combn(10,2)
length9combn(10,2))
length(combn(10,2))
combn(10,2)
combn(10,2)[1,]
length(combn(10,2)[1,])
length(combn(69,4)[1,])
length(combn(69,4)[1,])*2
length(combn(69,4)[1,])
length(combn(69,4)[1,])*2
length(combn(69,5)[1,])*2
setwd("~/Documents/GitHub/scarab-chromes/figure")
library(coda)
library(viridis)
library(beeswarm)
library(ape)
library(chromePlus)
library(phytools)
library (diversitree)
library(plotrix)
## checking convergence
all_luc <- read.csv('../results/sub_luc.csv')
all_pass <- read.csv('../results/sub_pas.csv')
all_sca <- read.csv('../results/sub_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -60), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-210,-165), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
# post burnin
sub_luc <- all_luc[all_luc$i == c(51:100),]
sub_pass <- all_pass[all_pass$i == c(51:100),]
sub_sca <- all_sca[all_sca$i == c(51:100),]
### asc (fission) ###
# scarab
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density((sub_sca$asc1)),main ='',xlab='Fission (/MY)',
ylim =c(-20,700), xlim=c(0,0.07),)
polygon(density(sub_sca$asc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$asc))
y <- -7
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[1])
# lucanidae
lines(density(sub_luc$asc1))
polygon(density(sub_luc$asc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$asc))
y <- -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[2])
# passalidae
lines(density((sub_pass$asc1)))
polygon(density(sub_pass$asc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$asc))
y<- -22
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[3])
points(x=0.053,y=700, col = cols[1], pch= 16,cex=1)
text(x=0.053,y=700,pos= 4, "Scarabaeidae", cex=1)
points(x=0.053,y=660, col = cols[2], pch= 16,cex =1)
text(x=0.053,y=660,pos= 4, "Lucanidae", cex=1)
points(x=0.053,y=620, col = cols[3], pch= 16,cex=1)
text(x=0.053,y=620,pos= 4, "Passalidae", cex=1)
### desc ###
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density(sub_sca$desc1),main ='',xlab='Fusion (/MY)',
xlim= c(0,0.09), ylim =c(-5,380))
polygon(density(sub_sca$desc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$desc))
y <- -5
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[1])
lines(density((sub_luc$desc1)))
polygon(density(sub_luc$desc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$desc))
y <- -10
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[2])
lines(density((sub_pass$desc1)))
polygon(density(sub_pass$desc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$desc))
y <-  -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[3])
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
points(x=0.07,y=370, col = cols[1], pch= 16)
text(x=0.07,y=370,pos= 4, "Scarabaeidae")
points(x=0.07,y=350, col = cols[2], pch= 16)
text(x=0.07,y=350,pos= 4, "Lucanidae")
points(x=0.07,y=330, col = cols[3], pch= 16)
text(x=0.07,y=330,pos= 4, "Passalidae")
# scs and number distribution
type_num_dat <- read.csv('../data/SpeciesChromList.csv')
df <- data.frame()
for (i in 1:length(type_num_dat$Family)){
if (type_num_dat$Family[i] %in% c('Scarabaeidae', 'Passalidae','Lucanidae')){
if (!type_num_dat$SCS[i] == ''){
df <- rbind(df,type_num_dat[i,])
}
}
}
# remove XXXXXO
df <- df[-21,]
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
famcolor <- c('Scarabaeidae' = cols[1],"Lucanidae" = cols[2],"Passalidae" = cols[3])
beeswarm( df$autosome.haploid~df$SCS,
method = c('center'),
cex =2, pch = 16, spacing = 0.6,
xlab = 'Sex Chromosome System', ylab = 'Haploid Autosome Number', pwcol = famcolor[df$Family],
corral = c("random")
)
legend("topleft", legend = c( 'Scarabaeidae',"Lucanidae","Passalidae"),
col = cols, pch = 19, cex = 1,bty = "n")
## plot the genus that have XY and Neo-XY and XY XO
## compare to their chromosome number change
# chrom v sex chrom plot
dat <- read.csv("../data/SpeciesChromList.csv")
dat <- dat[!is.na(dat$autosome.haploid),]
gen <- unique(dat$Genus)
XY <- NeoXY <- rep(NA,length(gen))
pdat <- data.frame(gen,XY,NeoXY)
for(i in 1:nrow(pdat)){
for(j in 2:3){
pdat[i,j] <- mean(dat$autosome.haploid[dat$Genus == pdat$gen[i] &
dat$SCS == colnames(pdat)[j]])
}
}
pdat <- pdat[complete.cases(pdat),]
pdat <- pdat[order(pdat$XY),]
xs1 <- c(1,1,1, seq(from=.95, by=.03,length.out=4))
plot(y=pdat$XY, x=xs1,
xlim=c(.75,2.25),
ylim=c(4.5,9.5),
xaxt="n",
xlab="Sex Chromosome System", ylab = 'Haploid Autosome Number ( x\u0305 )',
cex =1.5
)
cols <- viridis(7, option = 'D',alpha = 0.7, begin = 0)
x <- 2.05
y <- 9.6
y.dis <- 0.15
cex <- 0.7
text(x=x,y=y, "Phanaeus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-y.dis, "Dorcus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-2*y.dis, "Oryctes", adj=c(0,0.5), cex = cex)
text(x=x,y=y-3*y.dis, "Deltochilum", adj=c(0,0.5), cex = cex)
text(x=x,y=y-4*y.dis, "Haplidia", adj=c(0,0.5), cex = cex)
text(x=x,y=y-5*y.dis, "Phileurus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-6*y.dis, "Phyllognathus",adj=c(0,0.5), cex = cex)
x <- 1.95
x2 <- 2.03
lwd <- 2
lines(x=c(x,x2), y=rep(y,2), col = cols[1],lwd = lwd)
lines(x=c(x,x2), y=rep(y-y.dis,2), col = cols[2],lwd = lwd, lty =3)
lines(x=c(x,x2), y=rep(y-2*y.dis,2), col = cols[3],lwd = lwd)
lines(x=c(x,x2), y=rep(y-3*y.dis,2), col = cols[4],lwd = lwd)
lines(x=c(x,x2), y=rep(y-4*y.dis,2), col = cols[5],lwd = lwd)
lines(x=c(x,x2), y=rep(y-5*y.dis,2), col = cols[6],lwd = lwd)
lines(x=c(x,x2), y=rep(y-6*y.dis,2), col = cols[7],lwd = lwd)
axis(side=1,at=c(1,2), c("XY","NeoXY"))
xs2 <- c(2, 1+xs1[4], 1+xs1[5],2,1+xs1[6],2,1+xs1[7])
points(y=pdat$NeoXY, x=xs2, cex=1.5)
# cols[2] <- "red"
for(i in 1:7){
if (i != 2){
lines(x=c(xs1[i],xs2[i]), y=c(pdat$XY[i],pdat$NeoXY[i]),
col=cols[i], lwd = 3)
}
if (i == 2){
lines(x=c(xs1[i],xs2[i]), y=c(pdat$XY[i],pdat$NeoXY[i]),
col=cols[i], lwd = 3, lty =3)
}
}
install.packages('dataRetrieval')
library('dataRetrieval')
siteNumbers <- 03343010
siteINFO <- readNWISsite(siteNumbers)
comment(siteINFO)
siteINFO <- readNWISsite(siteNumbers)
siteNumbers <- "03343010"
siteINFO <- readNWISsite(siteNumbers)
comment(siteINFO)
dailyDataAvailable <- whatNWISdata(
siteNumber = siteNumbers,
service = "dv",
statCd = "00003"
)
dailyDataAvailable
View(dailyDataAvailable)
siteNumber <- "03343010"
parameterCd <- "00060" # Discharge
startDate <- "2021-04-25"
endDate <- "2021-10-25"
discharge <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
discharge
dailyDataAvailable
help("readNWISdv")
help("readNWISdv")
discharge
dailyDataAvailable
help(dailyDataAvailable)
help("dailyDataAvailable")
siteNumbers <- "03343010"
siteINFO <- readNWISsite(siteNumbers)
View(siteINFO)
comment(siteINFO)
dailyDataAvailable <- whatNWISdata(
siteNumber = siteNumbers,
service = "dv",
statCd = "00003"
)
dailyDataAvailable
dailyDataAvailable
dailyDataAvailable
View(dailyDataAvailable)
# retrive data
siteNumber <- "03343010"
parameterCd <- "00060" # Discharge
startDate <- "2021-04-25"
endDate <- "2021-10-25"
discharge <- readNWISdv(siteNumber, parameterCd, startDate, endDate)
discharge
