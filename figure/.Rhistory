install.packages('mapdata')
# making map of skyisands
library(maps)
library(mapdata)
help(map)
map('world', regions = 'USA')
map('state', regions = 'AZ')
map('state', regions = 'Arizona')
map('state', regions = 'Arizona',xlim = c(-141,-53), fill =T)
map('state', regions = 'Arizona',xlim = c(-141,-53), fill =T, col = 'grey')
map("worldHires","Canada”,  xlim=c(-141,-53),  ylim=c(40,85),   col="gray90",   fill=TRUE)
map("worldHires","Canada”,xlim=c(-141,-53),ylim=c(40,85),col="gray90",fill=TRUE)
map("worldHires",'Canada',xlim=c(-141,-53),ylim=c(40,85),col="gray90",fill=TRUE)
map("worldHires",'Canada',xlim=c(-141,-53),ylim=c(20,85),col="gray90",fill=TRUE)
map("worldHires",'Canada',xlim=c(-141,-53),ylim=c(20,90),col="gray90",fill=TRUE)
map("worldHires",'Canada',xlim=c(-141,-53),ylim=c(20,70),col="gray90",fill=TRUE)
map("worldHires",'Canada',xlim=c(-141,-53),ylim=c(20,85),col="gray90",fill=TRUE)
map('state', regions = 'Arizona',xlim = c(-141,-53),ylim = c(20,85), fill =T, col = 'grey')
map('state', regions = 'Arizona',xlim = c(-141,-53),ylim = c(40,85), fill =T, col = 'grey')
map('state', regions = 'Arizona',xlim = c(-141,-53),ylim = c(20,85), fill =T, col = 'grey')
map('state', regions = 'Arizona',xlim = c(-141,-53),ylim = c(20,90), fill =T, col = 'grey')
map('state', regions = 'Arizona',xlim = c(-141,-53), fill =T, col = 'grey')
map('state', regions = 'Arizona', fill =T, col = 'grey')
map('state', regions = 'Arizona', , ylime = c(10,100),fill =T, col = 'grey')
map('state', regions = c('Arizona','Utah'), , ylime = c(10,100),fill =T, col = 'grey')
map('state', regions = c('Arizona','Utah','New Mexico'), , ylime = c(10,100),fill =T, col = 'grey')
#define our map's range
lat <- c(48,64)
lon <- c(-140,-110)
#tell what point to center on
center = c(mean(lat), mean(lon))
#zoom: 1 = furthest out (entire globe),
larger numbers = closer in
zoom<-5
terrmap <- GetMap(center=center, zoom=zoom,maptype= "terrain", destfile = "terrain.png")
install.packages("RgoogleMaps")
library(RgoogleMaps)
terrmap <- GetMap(center=center, zoom=zoom,maptype= "terrain", destfile = "terrain.png")
plot(terrmap)
help(GerMap)
help(GetMap)
map('state', regions = c('Arizona','Utah','New Mexico'), , ylime = c(10,100),fill =T, col = 'grey')
map('state', regions = c('Arizona','Utah','New Mexico'), , ylime = c(1,100),fill =T, col = 'grey')
map('world', regions = c('Arizona','Utah','New Mexico'), , ylime = c(1,100),fill =T, col = 'grey')
map('world', regions = 'USA', ylime = c(1,100),fill =T, col = 'grey')
map('world', regions = 'USA',fill =T, col = 'grey')
map('world', regions = 'USA',fill =T, col = 'grey')
install.packages('ggmap')
library(ggmap)
ggmap(get_googlemap(center = c(lon = -2.9437, lat = 53.45)))
ggmap(get_googlemap(center = c(lon = -2.9437, lat = 53.45),zoom = 10, maptype = 'terrain', color = 'color'))
test <- ggmap(get_googlemap(center = c(lon = -2.9437, lat = 53.45),zoom = 10, maptype = 'terrain', color = 'color'))
qmap('Liverpool')
library(ggmap)
qmap('Liverpool')
qmap('Houston')
qmap('Houston', zoom = 14)
library(terrainr)
install.packages("terrainr")
library(terrainr)
mt_elbert_points <- data.frame(
lat = runif(100, min = 39.11144, max = 39.12416),
lng = runif(100, min = -106.4534, max = -106.437)
)
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points <- sf::st_set_crs(mt_elbert_points, 4326)
library(progressr)
handlers("progress")
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
raster::plot(raster::raster(output_files[[1]]))
raster::plotRGB(raster::brick(output_files[[2]]), scale = 1)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points <- sf::st_set_crs(mt_elbert_points, 4326)
handlers("progress")
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
raster::plot(raster::raster(output_files[[1]]))
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
mt_elbert_points
library(terrainr)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
handlers("progress")
handlers("progress")
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
mt_elbert_points <- data.frame(
lat = runif(100, min = 39.11144, max = 39.12416),
lng = runif(100, min = -106.4534, max = -106.437)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
raster::plot(raster::raster(output_files[[1]]))
raster::plotRGB(raster::brick(output_files[[2]]), scale = 1)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
mt_elbert_points <- sf::st_set_crs(mt_elbert_points, 4326)
mt_elbert_points
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
library(tamptools)
install.packages("tmaptools")
library(tmaptools)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
help("get_tiles")
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
)
location_of_interest
View(location_of_interest)
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
location_of_interest
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
location_of_interest
location_of_interest
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
library(terrainr)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
library(terrainr)
library(sf)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
# RasterLayer
r <- raster(nrows=10, ncols=10)
library(raster)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
View(r)
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::raster(output_tiles[["elevation"]][[1]])
raste_ob <- raster::raster(output_tiles[["elevation"]][[1]])
raster_ob <- raster::raster(output_tiles[["elevation"]][[1]])
plot(raster_ob)
point(x= -110.5, y = 31.6)
points(x= -110.5, y = 31.6)
plot(raster_ob, xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob,xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob, xlim = c(-112,-109))
plot(raster_ob)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
plot(raster_ob)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
plot(raster_ob)
az <- data.frame(110.825304,33.371061)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(sky_islands, 1000000)
az <- set_bbox_side_length(az, 1000000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 1000000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 400000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 400000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 300000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 300000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 200000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# genetic drift effec on population size
n = 10
gen = 1000
a1 = 0.5
a2 = 1-a1
n*2
n*2
toallel <- n*2
a1 * toallel
a2 * toallel
setwd("~/Documents/GitHub/scarab-chromes/figure")
# genus tree
library(ape)
library(phytools)
library(viridis)
trees <- read.tree('../data/final100trees')
chrom <- read.csv('../data/SpeciesChromList.csv')
# random pick one tree
set.seed(6)
tree <- trees[[sample(100,1)]]
genus <- c()
for (i in 1:length(tree$tip.label)){
# full name
if (tree$tip.label[i] %in% chrom$Name){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Name)][1])
}
# genus name
if (tree$tip.label[i] %in% chrom$Genus){
genus <- c(genus, chrom$Genus[which(tree$tip.label[i] == chrom$Genus)][1])
}
}
genus <- unique(genus)
# random pick tips
tips <- c()
for (i in 1:length((genus))){
# randome sample from all hit
tips <- c(tips, tree$tip.label[grepl(genus[i], tree$tip.label)][sample(sum(grepl(genus[i], tree$tip.label)),1)])
}
# trim tree
trim.genus.tree <- keep.tip(tree, tip = tips)
# change tip label only genus level
for (i in 1:length(trim.genus.tree$tip.label)){
trim.genus.tree$tip.label[i] <- sub("_.*", "", trim.genus.tree$tip.label[i])
}
# creating data table
table <- matrix(data = 0, nrow = length(tips), ncol = (range(chrom$male.haploid)[2]-range(chrom$male.haploid)[1]+1))
table <- data.frame(table)
row.names(table) <- genus
colnames(table) <- range(chrom$male.haploid)[1]:range(chrom$male.haploid)[2]
for (i in 1:length(genus)){
for (j in 1:length(chrom$male.haploid[which(chrom$Genus == genus[i])])){
num <- 0
num <- chrom$male.haploid[which(chrom$Genus == genus[i])][j]
table[i,num - range(chrom$male.haploid)[1] +1] <- table[i,num - range(chrom$male.haploid)[1] +1] +1
}
}
# remove the last two row because of missing data
table <- table[,-c(19,18)]
cols <- viridis(40, direction = -1, option = "F")
cols[1] <- 'white'
phylo.heatmap(trim.genus.tree, table, fsiz = c(0.0022,0.5,0.5),
split=c(0.7,0.3),
legend = T,labels = T,
legend.pos = c(0.02, 0.01),
pts = F, lwd = 0.5,
#colors = heat.colors(n= 300)[300:1])
colors = cols)
# draw grid line
lwd = 0.05
grid.col <- 'gray87'
y0=-0.0045
y1=1.0045
x0 = 1.1424
x1 = 0.501
for (i in 1:(length(trim.genus.tree$tip.label)+1)){
z = seq(from = y0, to = y1, length.out = length(trim.genus.tree$tip.label)+1)[i]
segments(x0 = x1, y0 = z, x1 = x0, y1 = z, lwd = lwd, col = grid.col)
}
for (i in 1:(ncol(table)+1)){
z = seq(from = x0, to = x1, length.out = ncol(table)+1)[i]
segments(x0 = z, y0 = y0, x1 = z, y1 = y1, lwd = lwd,col = grid.col)
}
