if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
# create subchrom
chrom <- data.frame()
tip.name <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
tip.names <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
# generate chrom data
for (n in 1:length(tip.names)){
if (tip.names[n] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[n]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[n])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[n])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[n])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[n] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[n]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
i =1
# subtrees
trees <- read.tree('../data/final_100trees')
allchrom <- read.csv('../data/SpeciesChromList.csv')
sca.tip <- c()
luc.tip <- c()
pas.tip <- c()
tip.names <- trees[[1]]$tip.label
for (i in 1:length(tip.names)){
if (tip.names[i] %in% allchrom$Name){
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
if (tip.names[i] %in% allchrom$Genus){
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
}
# create sub trees
sca.tree <- keep.tip.multiPhylo(trees, sca.tip)
luc.tree <- keep.tip.multiPhylo(trees, luc.tip)
pas.tree <- keep.tip.multiPhylo(trees, pas.tip)
# subtree analyses
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
sub <- c('sca','luc','pas')
# subtree
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
eval(parse(text = paste(sub[i],'tree',sep = '.')))
sub[i]
sub <- c('sca','luc','pas')
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
sub <- c('sca','luc','pas')
parse(text = paste(sub[i],'tree',sep = '.'))
sub[i]
sub
sub[i]
i =1
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
k =1
print(k)
# chrom data
# create subchrom
chrom <- data.frame()
tip.names <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
# generate chrom data
for (n in 1:length(tip.names)){
if (tip.names[n] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[n]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[n])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[n])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[n])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[n] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[n]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(k == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[k]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
for(k in 1:100){
print(k)
# chrom data
# create subchrom
chrom <- data.frame()
tip.names <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
# generate chrom data
for (n in 1:length(tip.names)){
if (tip.names[n] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[n]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[n])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[n])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[n])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[n] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[n]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(k == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[k]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
# loading required library
library(chromePlus)
library(diversitree)
library(phytools)
# subtrees
trees <- read.tree('../data/final_100trees')
allchrom <- read.csv('../data/SpeciesChromList.csv')
sca.tip <- c()
luc.tip <- c()
pas.tip <- c()
tip.names <- trees[[1]]$tip.label
for (i in 1:length(tip.names)){
if (tip.names[i] %in% allchrom$Name){
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
if (tip.names[i] %in% allchrom$Genus){
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
}
# create sub trees
sca.tree <- keep.tip.multiPhylo(trees, sca.tip)
luc.tree <- keep.tip.multiPhylo(trees, luc.tip)
pas.tree <- keep.tip.multiPhylo(trees, pas.tip)
# subtree analyses
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
sub <- c('sca','luc','pas')
for (i in 1:3){
# subtree
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
for(k in 1:100){
print(k)
# chrom data
# create subchrom
chrom <- data.frame()
tip.names <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
# generate chrom data
for (n in 1:length(tip.names)){
if (tip.names[n] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[n]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[n])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[n])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[n])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[n] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[n]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(k == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[k]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
# convert rate to millions of years
tree.depth <-c()
for(l in 1:100){
tree.depth[l] <- max(branching.times(trees[[l]]))
}
for (m in 1:length(results)){
results[[m]][,2:3] <- results[[m]][,2:3] / (tree.depth[m]*100)
}
#save data
write.csv(do.call(rbind,results), file = paste(paste('../results/sub',sub[i], sep = '_'),'csv', sep = '.'), row.names = F)
}
setwd("~/Documents/GitHub/scarab-chromes/figure")
library(coda)
library(viridis)
library(beeswarm)
library(ape)
library(chromePlus)
library(phytools)
library (diversitree)
library(plotrix)
## checking convergence
all_luc <- read.csv('../results/sub_luc.csv')
all_pass <- read.csv('../results/sub_pas.csv')
all_sca <- read.csv('../results/sub_sca.csv')
plot(all_luc$p[1:100], type = 'l', ylim = c(-60,-35), main = 'Lucanidae', ylab = '')
for (i in 1:(length(all_luc$p)/100-1)){
index <- seq(101, length(all_luc$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_luc$p[start:end])
}
plot(all_pass$p[1:100], type = 'l', ylim = c(-120, -60), main = 'Passalidae', ylab = '')
for (i in 1:(length(all_pass$p)/100-1)){
index <- seq(101, length(all_pass$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_pass$p[start:end])
}
plot(all_sca$p[1:100], type = 'l', ylim = c(-210,-165), main = 'Scarabeidae', ylab = '')
for (i in 1:(length(all_sca$p)/100-1)){
index <- seq(101, length(all_sca$p),by = 100)
start <- index[i]
end <- index[i]+100-1
lines(all_sca$p[start:end])
}
# post burnin
sub_luc <- all_luc[all_luc$i == c(51:100),]
sub_pass <- all_pass[all_pass$i == c(51:100),]
sub_sca <- all_sca[all_sca$i == c(51:100),]
### asc (fission) ###
# scarab
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density((sub_sca$asc1)),main ='',xlab='Fission (/MY)',
ylim =c(-20,700), xlim=c(0,0.07),)
polygon(density(sub_sca$asc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$asc))
y <- -7
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[1])
# lucanidae
lines(density(sub_luc$asc1))
polygon(density(sub_luc$asc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$asc))
y <- -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[2])
# passalidae
lines(density((sub_pass$asc1)))
polygon(density(sub_pass$asc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$asc))
y<- -22
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[3])
points(x=0.053,y=700, col = cols[1], pch= 16,cex=1)
text(x=0.053,y=700,pos= 4, "Scarabaeidae", cex=1)
points(x=0.053,y=660, col = cols[2], pch= 16,cex =1)
text(x=0.053,y=660,pos= 4, "Lucanidae", cex=1)
points(x=0.053,y=620, col = cols[3], pch= 16,cex=1)
text(x=0.053,y=620,pos= 4, "Passalidae", cex=1)
### desc ###
cols <- viridis(3, option = 'D',alpha = 0.7, begin = 0.45)
plot(density(sub_sca$desc1),main ='',xlab='Fusion (/MY)',
xlim= c(0,0.09), ylim =c(-5,380))
polygon(density(sub_sca$desc1),col=cols[1])
hpd <- HPDinterval(as.mcmc(sub_sca$desc))
y <- -5
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[1])
lines(density((sub_luc$desc1)))
polygon(density(sub_luc$desc1),col=cols[2])
hpd <- HPDinterval(as.mcmc(sub_luc$desc))
y <- -10
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[2])
lines(density((sub_pass$desc1)))
polygon(density(sub_pass$desc1),col=cols[3])
hpd <- HPDinterval(as.mcmc(sub_pass$desc))
y <-  -15
lines(y=c(y,y), x=hpd[1:2], lwd=2,col=cols[3])
cols <- viridis(3, option = 'D',alpha = 1, begin = 0.45)
points(x=0.07,y=370, col = cols[1], pch= 16)
text(x=0.07,y=370,pos= 4, "Scarabaeidae")
points(x=0.07,y=350, col = cols[2], pch= 16)
text(x=0.07,y=350,pos= 4, "Lucanidae")
points(x=0.07,y=330, col = cols[3], pch= 16)
text(x=0.07,y=330,pos= 4, "Passalidae")
