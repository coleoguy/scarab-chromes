cols <- viridis(7, option = 'D',alpha = 0.7, begin = 0)
x <- 2.05
y <- 9.6
y.dis <- 0.15
cex <- 0.7
text(x=x,y=y, "Phanaeus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-y.dis, "Dorcus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-2*y.dis, "Oryctes", adj=c(0,0.5), cex = cex)
text(x=x,y=y-3*y.dis, "Deltochilum", adj=c(0,0.5), cex = cex)
text(x=x,y=y-4*y.dis, "Haplidia", adj=c(0,0.5), cex = cex)
text(x=x,y=y-5*y.dis, "Phileurus", adj=c(0,0.5), cex = cex)
text(x=x,y=y-6*y.dis, "Phyllognathus",adj=c(0,0.5), cex = cex)
x <- 1.95
x2 <- 2.03
lwd <- 2
lines(x=c(x,x2), y=rep(y,2), col = cols[1],lwd = lwd)
lines(x=c(x,x2), y=rep(y-y.dis,2), col = cols[2],lwd = lwd, lty =3)
lines(x=c(x,x2), y=rep(y-2*y.dis,2), col = cols[3],lwd = lwd)
lines(x=c(x,x2), y=rep(y-3*y.dis,2), col = cols[4],lwd = lwd)
lines(x=c(x,x2), y=rep(y-4*y.dis,2), col = cols[5],lwd = lwd)
lines(x=c(x,x2), y=rep(y-5*y.dis,2), col = cols[6],lwd = lwd)
lines(x=c(x,x2), y=rep(y-6*y.dis,2), col = cols[7],lwd = lwd)
axis(side=1,at=c(1,2), c("XY","NeoXY"))
xs2 <- c(2, 1+xs1[4], 1+xs1[5],2,1+xs1[6],2,1+xs1[7])
points(y=pdat$NeoXY, x=xs2, cex=1.5)
# cols[2] <- "red"
for(i in 1:7){
if (i != 2){
lines(x=c(xs1[i],xs2[i]), y=c(pdat$XY[i],pdat$NeoXY[i]),
col=cols[i], lwd = 3)
}
if (i == 2){
lines(x=c(xs1[i],xs2[i]), y=c(pdat$XY[i],pdat$NeoXY[i]),
col=cols[i], lwd = 3, lty =3)
}
}
###chrom number###
#make simmap (only chrom number)
tree <- read.tree('../data/final_100trees')[[37]]
library(ape)
###chrom number###
#make simmap (only chrom number)
tree <- read.tree('../data/final_100trees')[[37]]
chrom <- read.csv('../data/final_chrom.csv')
#transform trees to mya from hundred of mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
Q <- matrix(data = 0, c,c)
# make row and column name vectors
cname<-c(rng[1]:rng[2])
colnames(Q)<-row.names(Q)<-cname
for (i in 1:c){
for (j in 1:c){
# define transition
# number change
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
library(chromePlus)
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
results <- readRDS('../results/simple_model_scs.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
Q[Q == 1] <- mean(b_result$asc1)
b_result
# Simmap
#chrom number#
tree <- read.tree('../data/final_100trees')[[37]]
chrom <- read.csv('../data/final_chrom.csv')
#transform trees to mya from hundred of mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
Q <- matrix(data = 0, c,c)
Q
# make row and column name vectors
cname<-c(rng[1]:rng[2])
colnames(Q)<-row.names(Q)<-cname
for (i in 1:c){
for (j in 1:c){
# define transition
# number change
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
Q
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
chrom.s
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
results <- readRDS('../results/simple_model_scs.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
b_result
# Sean
# load required libraries
library(chromePlus)
library(diversitree)
library(phytools)
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# variables to hold results and depths
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
# read in data
chrom <- read.csv('../data/final_chrom.csv')
trees <- read.tree("../data/final_100trees")
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
chrom.mat
i = 1
print(i)
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[i]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
results[[i]]
# chromosome number evolution
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# variables to hold results and depths
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
# read in data
chrom <- read.csv('../data/final_chrom.csv')
trees <- read.tree("../data/final_100trees")
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
for(i in 1:100){
print(i)
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[i]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
# convert rate to millions of years
tree.depth <-c()
trees <- read.tree("../data/final_100trees")
for(i in 1:100){
tree.depth[i] <- max(branching.times(trees[[i]]))
}
for (i in 1:length(results)){
results[[i]][,2:3] <- results[[i]][,2:3] / (tree.depth[i]*100)
}
#write the results
saveRDS(results, file = '../results/chrom_number_model_result.rds')
results <- readRDS('../results/chrom_number_model_result.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
model <- Q
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
# Simmap
#chrom number#
tree <- read.tree('../data/final_100trees')[[37]]
chrom <- read.csv('../data/final_chrom.csv')
#transform trees to mya from hundred of mya
tree$edge.length <- tree$edge.length * 100
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','NeoXY')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- rng[2]-rng[1]+1
Q <- matrix(data = 0, c,c)
# make row and column name vectors
cname<-c(rng[1]:rng[2])
colnames(Q)<-row.names(Q)<-cname
for (i in 1:c){
for (j in 1:c){
# define transition
# number change
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.s$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom.s$SCS[i] %in% c('XY','NeoXY')){
chrom.s$gen.prob[i] <- 0
}
}
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(2,3,5)],
range = rng,
hyper = F)
results <- readRDS('../results/chrom_number_model_result.rds')
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
model <- Q
Q[Q == 1] <- mean(b_result$asc1)
Q[Q == 2] <- mean(b_result$desc1)
results
diag(Q) <- -(rowSums(Q))
colnames(Q) <- rownames(Q) <- 1:19
colnames(model) <- rownames(model) <- 1:19
colnames(chrom.mat_) <- 1:19
test <- make.simmap2(tree = tree, x = chrom.mat_, model = model,Q = Q,nsim = 1,pi = "fitzjohn",rejmax = 1000000,rejint = 100000, monitor = T)
test <- make.simmap2(tree = tree, x = chrom.mat_, model = model,Q = Q,nsim = 1,pi = "fitzjohn",rejmax = 1000000,rejint = 100000, monitor = T)
source('functions.R')
test <- make.simmap2(tree = tree, x = chrom.mat_, model = model,Q = Q,nsim = 1,pi = "fitzjohn",rejmax = 1000000,rejint = 100000, monitor = T)
cols<-setNames(rev(viridis(n=19, option = 'H',begin = 0 )),
c(1:19))
plotSimmap(test,cols,fsize = 0.003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
ape::nodelabels(cex = 0.1)
# write.simmap(test.fixed[[1]], file = '../results/simmap_chrom_num', map.order = 'right-to-left')
# test <- read.simmap(file = '../results/simmap_chrom_num',format = 'phylip')
cols<-setNames(rev(viridis(n=19, option = 'H',begin = 0 )),
c(1:19))
plotSimmap(test,cols,fsize = 0.003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
# checking family
chrom <- read.csv('../data/chrom.csv')
tips <- trees[[37]]$tip.label
trees <- read.tree('../data/final_100trees')
tips <- trees[[37]]$tip.label
famcol <- c()
for (i in 1:length(tips)){
famcol <- c(famcol,chrom$Family[which(chrom$Species == tips[i])])
}
famcol
famcol <- gsub("Scarabaeidae",'red',famcol)
famcol <- gsub("Passalidae",'black',famcol)
famcol <- gsub("Lucanidae",'blue',famcol)
famcol
unique(famcol)
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
help("plotSimmap")
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1,tip.color = famcol)
plot(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1,tip.color = famcol)
plot(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1,tip.color = famcol)
test
plot(test)
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test,cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, colors = famcol)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test,colors = cols, fsize = famcol, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, tips = famcol)
famcol
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, tips = NA)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plot(test.fixed)
plot(test)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, tips = famcol)
famcol
test$tip.label
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, tips = 1:229)
plotSimmap(test,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, tips = 1:100)
test1 <- test
test1$tip.label <- famcol
plotSimmap(test1,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
# checking family
chrom <- read.csv('../data/chrom.csv')
trees <- read.tree('../data/final_100trees')
tips <- trees[[37]]$tip.label
famcol <- c()
for (i in 1:length(tips)){
famcol <- c(famcol,chrom$Family[which(chrom$Species == tips[i])])
}
test1 <- test
test1$tip.label <- famcol
plotSimmap(test1,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1)
plotSimmap(test1,colors = cols, fsize = .2, ftype = 'i',outline = F, lwd = 1, node.numbers = T)
#plot
plotSimmap(test, cols,fsize = .003, ftype = 'i',outline = F, lwd = 2, type = 'fan')
arc.cladelabels(node=439,text="Passalidae",offset=5,mark.node=FALSE)
arc.cladelabels(node=426,text="Lucanidae",offset=5,mark.node=FALSE)
arc.cladelabels(node=231,text="Scarabaeidae",offset=5,mark.node=FALSE)
# color bar
num_colors <- 19
values <- matrix(seq(3, 21, length.out = num_colors), ncol = 1)
plot(10, 10, type = "n", xlim = c(0, 2), ylim = c(0, 2), xlab = "", ylab = "")
image.plot(0, 1, values, col = colorRampPalette(rev(viridis(n=19, option = 'H',begin = 0 )))(num_colors),
axes = F, xlab = "", ylab = "", legend.only = T)
# checking divergence
results <- readRDS('../results/simple_model_scs.rds')
# color bar
num_colors <- 19
values <- matrix(seq(3, 21, length.out = num_colors), ncol = 1)
plot(10, 10, type = "n", xlim = c(0, 2), ylim = c(0, 2), xlab = "", ylab = "")
image.plot(0, 1, values, col = colorRampPalette(rev(viridis(n=19, option = 'H',begin = 0 )))(num_colors),
axes = F, xlab = "", ylab = "", legend.only = T)
library(fields)
# color bar
num_colors <- 19
values <- matrix(seq(3, 21, length.out = num_colors), ncol = 1)
plot(10, 10, type = "n", xlim = c(0, 2), ylim = c(0, 2), xlab = "", ylab = "")
image.plot(0, 1, values, col = colorRampPalette(rev(viridis(n=19, option = 'H',begin = 0 )))(num_colors),
axes = F, xlab = "", ylab = "", legend.only = T)
# checking divergence
results <- readRDS('../results/simple_model_scs.rds')
# checking divergence
results <- readRDS('../results/simple_model_scs.rds')
plot(results[[1]]$p, type = 'l', ylim = c(-110, -70))
for (i in 2:100){
lines(results[[i]]$p)
}
chrom <- read.csv('../data/final_chrom.csv')
trees <- read.tree("../data/final_100trees")
#transform trees to mya from hundred of mya
for(i in 1:length(trees)){
trees[[i]]$edge.length <- trees[[i]]$edge.length * 100
}
scs <- c()
for(i in 1:length(chrom$SCS)){
hit <- which(chrom$Species == trees[[37]]$tip.label[i])
scs[i] <- chrom$SCS[hit]
}
names(scs) <- trees[[37]]$tip.label
first_tree <- results[[37]]
b_result <- first_tree[51:100,]
Q<- matrix(c(0,3,5,1,0,6,2,4,0), 3)
colnames(Q) <- rownames(Q) <- c('NeoXY','XO','XY')
model <- Q
Q[1,2] <- mean(b_result$q23)
Q[1,3] <- mean(b_result$q21)
Q[2,1] <- mean(b_result$q32)
Q[2,3] <- mean(b_result$q31)
Q[3,1] <- mean(b_result$q12)
Q[3,2] <- mean(b_result$q13)
diag(Q) <- -rowSums(Q)
# makeing simmap with ARD model
test <- make.simmap(trees[[37]], x=scs, model = 'ARD' , pi="fitzjohn")
# makeing simmap with the rate estimates from mcmc
test <- make.simmap(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=100,model=model)
# make.simmap2 with the rate estimates from mcmc
test <- make.simmap2(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=1,model=model,monitor=T,rejmax=100000000)
source('functions.R')
# make.simmap2 with the rate estimates from mcmc
test <- make.simmap2(tree=trees[[37]], x=scs ,Q=Q, pi="fitzjohn",nsim=1,model=model,monitor=T,rejmax=100000000)
