raster::plot(raster::raster(output_files[[1]]))
raster::plotRGB(raster::brick(output_files[[2]]), scale = 1)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points <- sf::st_set_crs(mt_elbert_points, 4326)
handlers("progress")
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
raster::plot(raster::raster(output_files[[1]]))
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
mt_elbert_points
library(terrainr)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
handlers("progress")
handlers("progress")
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
mt_elbert_points <- data.frame(
lat = runif(100, min = 39.11144, max = 39.12416),
lng = runif(100, min = -106.4534, max = -106.437)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
raster::plot(raster::raster(output_files[[1]]))
raster::plotRGB(raster::brick(output_files[[2]]), scale = 1)
mt_elbert_points <- data.frame(
lat = runif(100, min = 31.36, max = 34.091),
lng = runif(100, min = -111.154, max = -107.667)
)
mt_elbert_points
mt_elbert_points <- sf::st_as_sf(mt_elbert_points,
coords = c("lng", "lat"))
mt_elbert_points
mt_elbert_points <- sf::st_set_crs(mt_elbert_points, 4326)
mt_elbert_points
with_progress(
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
)
output_files <- get_tiles(mt_elbert_points,
output_prefix = tempfile(),
services = c("elevation", "ortho"))
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
library(tamptools)
install.packages("tmaptools")
library(tmaptools)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"))
)
help("get_tiles")
with_progress( # When not specifying resolution, default is 1m pixels
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
)
location_of_interest
View(location_of_interest)
output_tiles <- get_tiles(location_of_interest,resolution = 1,
services = c("elevation", "ortho"))
location_of_interest
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
location_of_interest
location_of_interest
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
library(terrainr)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
library(terrainr)
library(sf)
library(sf)
location_of_interest <- tmaptools::geocode_OSM("Hyampom California")$coords
location_of_interest <- data.frame(
x = location_of_interest[["x"]],
y = location_of_interest[["y"]]
)
location_of_interest <- st_as_sf(
location_of_interest,
coords = c("x", "y"),
crs = 4326
)
location_of_interest <- set_bbox_side_length(location_of_interest, 8000)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
output_tiles <- get_tiles(location_of_interest,
services = c("elevation", "ortho"),
resolution = 30 # pixel side length in meters
)
# RasterLayer
r <- raster(nrows=10, ncols=10)
library(raster)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
View(r)
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::raster(output_tiles[["elevation"]][[1]])
raste_ob <- raster::raster(output_tiles[["elevation"]][[1]])
raster_ob <- raster::raster(output_tiles[["elevation"]][[1]])
plot(raster_ob)
point(x= -110.5, y = 31.6)
points(x= -110.5, y = 31.6)
plot(raster_ob, xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob,xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob, xlim = c(-112,-109))
plot(raster_ob)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
plot(raster_ob)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
plot(raster_ob)
az <- data.frame(110.825304,33.371061)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(sky_islands, 1000000)
az <- set_bbox_side_length(az, 1000000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 1000000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 400000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 400000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 300000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 300000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 200000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# genetic drift effec on population size
n = 10
gen = 1000
a1 = 0.5
a2 = 1-a1
n*2
n*2
toallel <- n*2
a1 * toallel
a2 * toallel
setwd("~/Documents/GitHub/scarab-chromes/scripts")
# loading required library
library(chromePlus)
library(diversitree)
library(phytools)
# subtrees
trees <- read.tree('../data/final100trees')
allchrom <- read.csv('../data/SpeciesChromList.csv')
sca.tip <- c()
luc.tip <- c()
pas.tip <- c()
tip.names <- trees[[1]]$tip.label
for (i in 1:length(tip.names)){
if (tip.names[i] %in% allchrom$Name){
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Name == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
if (tip.names[i] %in% allchrom$Genus){
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Scarabaeidae"){
sca.tip <- c(sca.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Lucanidae"){
luc.tip <- c(luc.tip, tip.names[i])
}
if (allchrom$Family[which(allchrom$Genus == tip.names[i])[1]] == "Passalidae"){
pas.tip <- c(pas.tip, tip.names[i])
}
}
}
# create sub trees
sca.tree <- keep.tip.multiPhylo(trees, sca.tip)
luc.tree <- keep.tip.multiPhylo(trees, luc.tip)
pas.tree <- keep.tip.multiPhylo(trees, pas.tip)
# subtree analyses
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
sub <- c('sca','luc','pas')
for (i in 1:3){
# subtree
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
trees <- eval(parse(text = paste(sub[i],'tree',sep = '.')))
for(k in 1:100){
print(k)
# chrom data
# create subchrom
chrom <- data.frame()
tip.names <- eval(parse(text = paste(sub[i],'tip',sep = '.')))
# generate chrom data
for (n in 1:length(tip.names)){
if (tip.names[n] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[n]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[n])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[n])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[n])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[n] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[n])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[n]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[n])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[n])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[n])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(j in 1:nrow(chrom)){
if(chrom$SCS[j] %in% c('XY','NeoXY')){
chrom$gen.prob[j] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
tree.depth[k] <- max(branching.times(trees[[k]]))
trees[[k]]$edge.length <- trees[[k]]$edge.length / tree.depth[k]
# make the likelihood function
lik <- make.mkn(tree = trees[[k]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(k == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[k]] <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
nsteps = iter,
w = w,
prior = prior)
}
# convert rate to millions of years
tree.depth <-c()
for(l in 1:100){
tree.depth[l] <- max(branching.times(trees[[l]]))
}
for (m in 1:length(results)){
results[[m]][,2:3] <- results[[m]][,2:3] / (tree.depth[m]*100)
}
#save data
# write.csv(do.call(rbind,results), file = paste(paste('../results/sub',sub[i], sep = '_'),'csv', sep = '.'), row.names = F)
}
