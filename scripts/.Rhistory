points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.594218,31.588173)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::raster(output_tiles[["elevation"]][[1]])
raste_ob <- raster::raster(output_tiles[["elevation"]][[1]])
raster_ob <- raster::raster(output_tiles[["elevation"]][[1]])
plot(raster_ob)
point(x= -110.5, y = 31.6)
points(x= -110.5, y = 31.6)
plot(raster_ob, xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob,xlim = c(-111, -110))
plot(raster_ob)
plot(raster_ob, xlim = c(-112,-109))
plot(raster_ob)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
raster::plotRGB(raster::brick(output_tiles[["ortho"]][[1]]), scale = 1)
raster::plot(raster::raster(output_tiles[["elevation"]][[1]]))
plot(raster_ob)
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# RasterLayer
r <- raster(nrows=10, ncols=10)
r <- setValues(r, 1:ncell(r))
plot(r)
e <- extent(r)
plot(e, add=TRUE, col='red', lwd=4)
e <- e / 2
plot(e, add=TRUE, col='red')
# Scatterplot of 2 RasterLayers
r2 <- sqrt(r)
plot(r, r2)
plot(r, r2, gridded=TRUE)
# Multi-layer object (RasterStack / Brick)
s <- stack(r, r2, r/r)
plot(s, 2)
plot(s)
# two objects, different range, one scale:
values(r) <- runif(ncell(r))
r2 <- r/2
brks <- seq(0, 1, by=0.1)
nb <- length(brks)-1
cols <- rev(terrain.colors(nb))
par(mfrow=c(1,2))
plot(r, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='first')
plot(r2, breaks=brks, col=cols, lab.breaks=brks, zlim=c(0,1), main='second')
# breaks and labels
x <- raster(nc=10, nr=10)
values(x) <- runif(ncell(x))
brk <- c(0, 0.25, 0.75, 1)
arg <- list(at=c(0.12,0.5,0.87), labels=c("Low","Med.","High"))
plot(x, col=terrain.colors(3), breaks=brk)
plot(x, col=terrain.colors(3), breaks=brk, axis.args=arg)
par(mfrow=c(1,1))
# color ramp
plot(x, col=colorRampPalette(c("red", "white", "blue"))(255))
# adding random points to the map
xy <- cbind(-180 + runif(10) * 360, -90 + runif(10) * 180)
points(xy, pch=3, cex=5)
# adding the same points to each map of each layer of a RasterStack
fun <- function() {
points(xy, cex=2)
points(xy, pch=3, col='red')
}
plot(s, addfun=fun)
plot(raster_ob)
az <- data.frame(110.825304,33.371061)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(sky_islands, 1000000)
az <- set_bbox_side_length(az, 1000000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 1000000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 400000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 400000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- set_bbox_side_length(az, 300000)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 300000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
az <- data.frame(110.825304,33.371061)
colnames(az) <- c('x','y')
az <- st_as_sf(az, coords = c('x','y'), crs = 4326)
az <- set_bbox_side_length(az, 200000)
az_output_tiles <- get_tiles(az, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# making map of skyisands
library(terrainr)
library(sf)
sky_islands <- data.frame(-110.065780,32.117666)
colnames(sky_islands) <- c('x','y')
sky_islands <- st_as_sf(sky_islands, coords = c('x','y'), crs = 4326)
sky_islands <- set_bbox_side_length(sky_islands, 100000)
output_tiles <- get_tiles(sky_islands, services = c('elevation', 'ortho'), resolution = 30)
# genetic drift effec on population size
n = 10
gen = 1000
a1 = 0.5
a2 = 1-a1
n*2
n*2
toallel <- n*2
a1 * toallel
a2 * toallel
setwd("~/Desktop/Projects/scarab-comparaitve/scripts")
i =1
# load required libraries
library(chromePlus)
library(diversitree)
library(phytools)
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# variables to hold results and depths
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
# read in data
chrom <- read.csv('../data/chrom.data/mcc_clean_dat.csv')
trees <- read.tree("../data/6.BEAST/result_1000000000/100_tipdropped.trees")
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','Xyp','Xyr','NeoXY','Xy')){
chrom$gen.prob[i] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom.mat <- datatoMatrix(x = chrom[,c(1,2,4)],
range = rng,
hyper = T)
i = 1
print(i)
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = T,
verbose = T,
constrain = list(drop.demi = T,
drop.poly = T, saf.model =T))
#argnames(con.lik$`likelihood function`)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik$`likelihood function`,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik$`likelihood function`))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik$`likelihood function`))+1)], quantile, c(.05, .95)))
}
# run MCMC
results[[i]] <- mcmc(lik = con.lik$`likelihood function`,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik$`likelihood function`))),
nsteps = iter,
w = w,
prior = prior)
View(results)
#
#
library(coda)
library(viridis)
library(chromePlus)
library(ape)
source('functions.R')
mcmc_results_100 <- readRDS("simple_mcmc_converted.rds")
postburn <- mcmc_results_100[[1]][51:100,]
for(i in 2:100){
postburn <- rbind(postburn, mcmc_results_100[[i]][51:100,])
}
plot(y=postburn$asc1-postburn$asc2,
x=rnorm(mean=1,n=5000,sd=.1), pch=16, cex=.21,
col=rgb(0,0,0,.1),xlim=c(.5,6.5),
xaxt="n", ylim=c(-.02,.12))
points(y=postburn$desc1-postburn$desc2, x=rnorm(mean=2,n=5000,sd=.1),
pch=16, cex=.21, xlim=c(0,8),xaxt="n", col=rgb(0,0,0,.1))
hpd <- HPDinterval(as.mcmc(postburn$desc1-postburn$desc2))
lines(x=c(2,2), y=hpd[1:2], lwd=3)
hpd <- HPDinterval(as.mcmc(postburn$asc1-postburn$asc2))
lines(x=c(1,1), y=hpd[1:2], lwd=3)
points(y=, x=rnorm(mean=4,n=5000,sd=.1), pch=16, cex=.21, xlim=c(0,8),xaxt="n", col=cols)
points(y=postburn$tran12, x=rnorm(mean=5,n=5000,sd=.1), pch=16, cex=.21, xlim=c(0,8),xaxt="n", col=cols)
points(y=postburn$tran21, x=rnorm(mean=6,n=5000,sd=.1), pch=16, cex=.21, xlim=c(0,8),xaxt="n", col=cols)
axis(side=1, at=1:6, c("asc1","asc2","desc1","desc2", "loss","gain"))
####################################################################
##### make simmap
chrom <- read.csv('../data/chrom.data/mcc_clean_dat.csv')
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','Xyp','Xyr','NeoXY','Xy')){
chrom$gen.prob[i] <- 0
}
}
# make a Q matrix
c <- (rng[2]-rng[1]+1)
Q <- matrix(data = 0, c,c)
# make row and column name vectors
cname<-c()
for (i in rng[1]:rng[2]){
cname <- c(cname,i)
}
colnames(Q)<-row.names(Q)<-cname
# filling the matrix
# top right and bottom left are transition states
for (i in 1:c){
for (j in 1:c){
if (i+1==j){
Q[i,j] <- 1
}
if (i-1==j){
Q[i,j] <- 2
}
}
}
#make.simmap
tree <- read.tree('../data/6.BEAST/result_1000000000/100_tipdropped.trees')[[37]]
chrom <- read.csv('../data/chrom.data/mcc_clean_dat.csv')
chrom$gen.prob <- 1
for(i in 1:nrow(chrom)){
if(chrom$SCS[i] %in% c('XY','Xyp','Xyr','NeoXY','Xy')){
chrom$gen.prob[i] <- 0
}
}
for (i in 1:nrow(chrom)){
if (chrom$gen.prob[i] == 0){
state <- paste0(chrom$Chroms[i],'h')
}
else{
state <- paste0(chrom$Chroms[i])
}
chrom$sim.state[i] <- state
}
#re order the tips
chrom$Species %in% tree$tip.label
chrom.s <- chrom
for (i in 1:length(tree$tip.label)){
temp <- which(chrom$Species == tree$tip.label[i])
chrom.s[i,] = chrom[temp,]
}
chrom.mat_ <- datatoMatrix(x = chrom.s[,c(1,2)],
range = rng,
hyper = F)
results <- readRDS('simple_mcmc_raw.rds')
first_tree <- results[[1]]
# 50% of burn in
b_result <- first_tree[51:100,]
model <- Q
Q[Q == 1] <- mean(c(b_result$asc1,b_result$asc2))
Q[Q == 2] <- mean(c(b_result$desc1,b_result$desc2))
diag(Q) <- -(rowSums(Q))
colnames(Q) <- rownames(Q) <- 1:19
colnames(model) <- rownames(model) <- 1:19
colnames(chrom.mat_) <- 1:19
# make simmap
test <- make.simmap2(tree = tree, x = chrom.mat_, model = model,Q = Q, pi = "fitzjohn",nsim = 1,rejmax = 1000000,rejint = 100000, monitor = T)
cols<-setNames(c(viridis(n = 19)),
c(1:19))
# drop tips
plotSimmap(test, cols,fsize = .2, ftype = 'i',outline = F, lwd = 1)
ape::nodelabels(cex = 0.1)
target_node <- 496  # Replace with the ID of your target node
descendant <- getDescendants(tree, target_node)
drop_tip <- test$tip.label[descendant]
target_node <- 499  # Replace with the ID of your target node
descendant <- getDescendants(tree, target_node)
drop_tip <- c(drop_tip,test$tip.label[descendant])
drop_test <- drop.tip.simmap(test, drop_tip)
target_node <- 463  # Replace with the ID of your target node
descendant <- getDescendants(drop_test, target_node)
drop_tip <- drop_test$tip.label[descendant]
target_node <- 459  # Replace with the ID of your target node
descendant <- getDescendants(drop_test, target_node)
# read in data
allchrom <- read.csv('../data/SpeciesChromList.csv')
trees <- read.tree("../data/final_100trees")
# define pars
iter <- 100
setwd("~/Documents/GitHub/scarab-chromes/scripts")
# load required libraries
library(chromePlus)
library(diversitree)
library(phytools)
library(plyr)
# read in data
allchrom <- read.csv('../data/SpeciesChromList.csv')
trees <- read.tree("../data/final_100trees")
# define pars
iter <- 100
prior <- make.prior.exponential(r = 2)
# variables to hold results and depths
results <- vector(mode = "list", length = 100)
tree.depth <- vector(mode = "numeric", length = 100)
i =1
print(i)
##################
### chrom data ###
##################
# genus level might have different data
# so we need to random pick data eveytime
# subset chrom data
tip.names <- trees[[1]]$tip.label
chrom <- data.frame()
# generate chrom data
for (j in 1:length(tip.names)){
if (tip.names[j] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[j]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[j])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[j])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[j])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[j] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[j]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[j])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[j])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[j])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(k in 1:nrow(chrom)){
if(chrom$SCS[k] %in% c('XY','NeoXY')){
chrom$gen.prob[k] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
print(i)
##################
### chrom data ###
##################
# genus level might have different data
# so we need to random pick data eveytime
# subset chrom data
tip.names <- trees[[1]]$tip.label
chrom <- data.frame()
# generate chrom data
for (j in 1:length(tip.names)){
if (tip.names[j] %in% allchrom$Name){
if (length(which(allchrom$Name == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Name == tip.names[j]),c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Name == tip.names[j])) > 1){
pick <- sample(length(which(allchrom$Name == tip.names[j])),1)
hitdat <- allchrom[which(allchrom$Name == tip.names[j])[pick],c(1,4,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
if (tip.names[j] %in% allchrom$Genus){
if (length(which(allchrom$Genus == tip.names[j])) == 1){
hitdat <- allchrom[which(allchrom$Genus == tip.names[j]),c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
if (length(which(allchrom$Genus == tip.names[j])) > 1){
pick <- (sample(length(which(allchrom$Genus == tip.names[j])),1))
hitdat <- allchrom[which(allchrom$Genus == tip.names[j])[pick],c(1,2,6,8)]
colnames(hitdat) <- c("Family","Species","Chroms","SCS")
chrom <-rbind(chrom, hitdat)
}
}
}
chrom$SCS <- sub("XXXXXO", "XO", chrom$SCS)
chrom$gen.prob <- 1
for(k in 1:nrow(chrom)){
if(chrom$SCS[k] %in% c('XY','NeoXY')){
chrom$gen.prob[k] <- 0
}
}
# get the range of chromosome number
rng <- c(range(chrom$Chroms, na.rm = T)[1] - 1,
range(chrom$Chroms, na.rm = T)[2] + 1)
# make a probability matrix for chromosome number
chrom.mat <- datatoMatrix(x = chrom[,c(2,3,5)],
range = rng,
hyper = F)
chrom.mat
tree.depth[i] <- max(branching.times(trees[[i]]))
trees[[i]]$edge.length <- trees[[i]]$edge.length / tree.depth[i]
# make the likelihood function
lik <- make.mkn(tree = trees[[i]],
states = chrom.mat,
k = ncol(chrom.mat),
strict = FALSE,
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
polyploidy = F,
hyper = F,
constrain = list(drop.demi = T,
drop.poly = T))
# safe
argnames(con.lik)
if(i == 1){
temp <- c()
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = 100,
w = 1)
# get values for w
w <- diff(sapply(temp[11:100, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
}
