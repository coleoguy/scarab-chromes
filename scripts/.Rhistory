setwd("~/Documents/GitHub/scarab-chromes/scripts")
library(evobiR)
help("Pfaa")
# read in data
chrom <- read.csv('../data/final_chrom.csv')
# propotion of SA-fusion
library(evobiR)
library(ape)
library(phytools)
library(viridis)
source('functions.R')
library(coda)
# read in data
chrom <- read.csv('../data/final_chrom.csv')
trees <- read.tree("../data/final_100trees")
# change tree to hundred mya
for(i in 1:length(trees)){
trees[[i]]$edge.length <- trees[[i]]$edge.length * 100
}
tree <- trees[[37]]
#making Q matrix
rng <- range(chrom$Chroms)
rng.len <- rng[2]-rng[1]+1
chrom.mat <- matrix(data = 0, nrow = (rng.len*3), ncol = (rng.len*3))
chrom.mat
# fill in the Q matrix
# 12 parameters
# fill in +1 and -1 in same scs
for (i in 1:(rng.len*3)){
for (j in 1:(rng.len*3)){
# Neo to others
if (i <= rng.len){
# to Neo
if (j <= rng.len){
if (i +1 == j){
chrom.mat[i,j] <- 1
}
if (i == j+1){
chrom.mat[i,j] <- 2
}
}
# to XO
if (j > rng.len & j <= (rng.len*2)){
if (i + rng.len == j){
chrom.mat[i,j] <- 7
}
}
# to XY
if (j > (rng.len*2) & j <= (rng.len*3)){
if (i + (rng.len*2) == j){
chrom.mat[i,j] <- 8
}
}
}
# XO to other
if (i > rng.len & i <= (rng.len*2)){
# to Neo
if (j <= rng.len){
if (i == j + rng.len +1){
chrom.mat[i,j] <- 10
}
}
# to XO
if (j > rng.len & j <= (rng.len*2)){
if ( i +1 == j){
chrom.mat[i,j] <- 3
}
if ( i == j + 1){
chrom.mat[i,j] <- 4
}
}
# to XY
if (j > (rng.len*2)){
if (i + (rng.len) == j +1){
chrom.mat[i,j] <- 11
}
}
}
# XY to other
if (i > (rng.len*2)){
# to Neo
if (j <= rng.len){
if (i == j + (rng.len*2) + 1){
chrom.mat[i,j] <- 12
}
}
# to XO
if (j > rng.len & j <= (rng.len*2)){
if (j + rng.len == i) {
chrom.mat[i,j] <- 9
}
}
# to XY
if (j > (rng.len*2)){
if (j == i+1 ){
chrom.mat[i,j] <- 5
}
if (j +1 == i ){
chrom.mat[i,j] <- 6
}
}
}
}
}
rownames(chrom.mat) <- colnames(chrom.mat) <- 1:51
# make sim state
chrom$sim.state <- NA
for (i in 1:length(chrom$SCS)){
if (chrom$SCS[i] == 'NeoXY'){
chrom$sim.state[i] <- chrom$Chroms[i] - rng[1] +1
}
if (chrom$SCS[i] == 'XO'){
chrom$sim.state[i] <- chrom$Chroms[i] + (rng.len) - rng[1]+1
}
if (chrom$SCS[i] == 'XY'){
chrom$sim.state[i] <- chrom$Chroms[i] + (rng.len*2) - rng[1]+1
}
}
x <- matrix(0,  nrow=nrow(chrom), rng.len*3)
rownames(x) <- chrom$Species
for(i in 1:nrow(x)){
x[i, chrom$sim.state[i]] <- 1
}
colnames(x) <- 1:(rng.len*3)
sim <- 100
test <- make.simmap2(tree, x = x, model = chrom.mat, pi = 'fitzjohn', nsim = sim,rejmax = 1000000,rejint = 100000, monitor = T )
